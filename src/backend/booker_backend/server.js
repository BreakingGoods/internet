// server.js
const express = require("express");
const session = require("express-session"); // ‡πÉ‡∏ä‡πâ express-session
const connection = require("./db"); // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const cors = require("cors");
const { Server } = require("socket.io");
const http = require("http");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: "*" }, // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà
});

// ‚úÖ Middleware ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î
app.use(express.json()); // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JSON request body
app.use(
  cors({
    origin: "http://localhost:5501", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ç‡∏≠‡∏á Frontend
    credentials: true, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡πà‡∏á Cookie
  })
);

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Session
app.use(
  session({
    secret: "supersecretkey",
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: false, // ‡πÉ‡∏ä‡πâ false ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTP
      httpOnly: true,
      sameSite: "lax",
      maxAge: 3600000, // 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    },
  })
);

// ‚úÖ API ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
app.post("/login", async (req, res) => {
  const { username, password } = req.body;

  try {
    const [users] = await connection
      .promise()
      .query(
        "SELECT * FROM user WHERE username = ? AND password = ?",
        [username, password]
      );

    if (users.length === 0) {
      return res
        .status(401)
        .json({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const user = users[0];

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á student
    const [studentResults] = await connection
      .promise()
      .query("SELECT * FROM student WHERE student_id = ?", [
        user.username,
      ]);

    if (studentResults.length > 0) {
      req.session.user = { role: "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï", data: studentResults[0] };
      req.session.save((err) => {
        if (err) {
          console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô:", err);
          return res.status(500).json({ error: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
        }
        console.log("‚úÖ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", req.session);
        res.cookie("connect.sid", req.sessionID, {
          httpOnly: true,
          sameSite: "lax",
        });
        return res.json({ success: true, role: "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï" });
      });
      return;
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á teacher
    const [teacherResults] = await connection
      .promise()
      .query("SELECT * FROM teacher WHERE teacher_id = ?", [
        user.username,
      ]);

    if (teacherResults.length > 0) {
      req.session.user = { role: "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå", data: teacherResults[0] };
      req.session.save((err) => {
        if (err) {
          console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô:", err);
          return res.status(500).json({ error: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
        }
        console.log("‚úÖ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", req.session);
        res.cookie("connect.sid", req.sessionID, {
          httpOnly: true,
          sameSite: "lax",
        });
        return res.json({ success: true, role: "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå" });
      });
      return;
    }

    res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

// ‚úÖ API ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
app.get("/session", (req, res) => {
  console.log("üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å API:", req.session);
  if (req.session.user) {
    const { role, data } = req.session.user;
    res.json({
      role: role,
      data: {
        user_id: data.student_id || data.teacher_id, // ‡πÉ‡∏ä‡πâ student_id ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï, ‡πÉ‡∏ä‡πâ teacher_id ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
        student_id: data.student_id || null, // ‡πÄ‡∏û‡∏¥‡πà‡∏° student_id
        teacher_id: data.teacher_id || null, // ‡πÄ‡∏û‡∏¥‡πà‡∏° teacher_id
        full_name: data.full_name,
        faculty: data.faculty,
        department: data.department,
        study_year: data.study_year || "N/A", // ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ study_year
      },
    });
  } else {
    return res.status(401).json({ error: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô" });
  }
});


// ‚úÖ API ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå -> ‡∏•‡πâ‡∏≤‡∏á Session
app.post("/logout", (req, res) => {
  req.session.destroy(() => {
    res.json({ success: true });
  });
});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(
  cors({
    origin: "http://localhost:5501",
    credentials: true,
    allowedHeaders: ["Content-Type", "Authorization"],
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  })
);

// üìå Endpoint: /getSchedule
app.get("/getSchedule", async (req, res) => {
  try {
    const [results] = await connection
      .promise()
      .query("SELECT * FROM room_schedule");
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", results.length);
    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// üìå Endpoint: /room_request
app.get("/room_request", (req, res) => {
  connection.query("SELECT * FROM room_request", (err, results) => {
    if (err) {
      console.error("‚ùå Error:", err);
      res.status(500).send(err);
      return;
    }
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", results.length);
    res.json(results);
  });
});

// üìå Endpoint: /computer_management
app.get("/computer_management", (req, res) => {
  connection.query("SELECT * FROM computer_management", (err, results) => {
    if (err) {
      console.error("‚ùå Error:", err);
      res.status(500).send(err);
      return;
    }
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", results.length);
    res.json(results);
  });
});

// üìå Endpoint: /getEquipments?room=307
app.get("/getEquipments", async (req, res) => {
  try {
    const room = req.query.room;
    if (!room) {
      return res.status(400).json({ error: "Missing room parameter" });
    }
    const [results] = await connection.promise().query(
      `SELECT m.equipment_id, m.request_quantity, e.equipment_name 
         FROM equipment_management m 
         JOIN equipment e ON m.equipment_id = e.equipment_id 
         WHERE m.room_id = ?`,
      [room]
    );
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", results.length);
    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// ‚òÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á /roomdetail endpoint ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå room_name ‚òÖ
app.get("/roomdetail", (req, res) => {
  const query =
    "SELECT rli.room_name AS full_name, rli.floor, rli.room_id, rli.room_name, SUM(CASE WHEN rlr.request_status = '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' THEN 1 ELSE 0 END) AS Approved_Count FROM room rli LEFT JOIN room_request rlr ON rli.room_id = rlr.room_id GROUP BY rli.room_id, rli.room_name, rli.floor, rli.room_name ORDER BY Approved_Count DESC;";
  connection.query(query, (err, results) => {
    if (err) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
      res.status(500).send(err);
      return;
    }
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", results);
    res.json(results);
  });
});

// Endpoint: /data/student
app.get("/data/student", (req, res) => {
  connection.query("SELECT * FROM student", (err, results) => {
    if (err) {
      console.error("‚ùå Error:", err);
      res.status(500).send(err);
      return;
    }
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å student:", results);
    res.json(results);
  });
});

// Endpoint: /data/teacher
app.get("/data/teacher", (req, res) => {
  connection.query("SELECT * FROM teacher", (err, results) => {
    if (err) {
      console.error("‚ùå Error:", err);
      res.status(500).send(err);
      return;
    }
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å teacher:", results);
    res.json(results);
  });
});

// üìå Endpoint: /user - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå)
app.get("/user", (req, res) => {
  const query = `
    SELECT 
      si.full_name, 
      si.student_id AS user_id, 
      si.department, 
      si.phone_number, 
      si.faculty, 
      si.study_year, 
      si.email, 
      COUNT(rlr.student_id) AS Status 
    FROM room_request rlr 
    JOIN student si ON rlr.student_id = si.student_id 
    GROUP BY si.student_id 
    ORDER BY Status DESC;
  `;
  
  connection.query(query, (err, studentResults) => {
    if (err) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏ô‡∏¥‡∏™‡∏¥‡∏ï):", err);
      res.status(500).send(err);
      return;
    }

    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", studentResults);

    // üìå ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const teacherQuery = `
      SELECT 
        ti.full_name, 
        ti.teacher_id AS user_id, 
        ti.department, 
        ti.phone_number, 
        ti.faculty, 
        NULL AS study_year,  -- ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ study_year
        ti.email, 
        COUNT(rlr.teacher_id) AS Status 
      FROM room_request rlr 
      JOIN teacher ti ON rlr.teacher_id = ti.teacher_id 
      GROUP BY ti.teacher_id 
      ORDER BY Status DESC;
    `;

    connection.query(teacherQuery, (err, teacherResults) => {
      if (err) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå):", err);
        res.status(500).send(err);
        return;
      }

      console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", teacherResults);

      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ô‡∏¥‡∏™‡∏¥‡∏ï + ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
      const allUsers = [...studentResults, ...teacherResults];
      res.json(allUsers);
    });
  });
});


// üìå Endpoint: /userTeacher - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
app.get("/userTeacher", async (req, res) => {
  try {
    const [results] = await connection
      .promise()
      .query("SELECT * FROM teacher");
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", results.length);
    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// üìå Endpoint: /userAccount - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.get("/userAccount", async (req, res) => {
  try {
    const [results] = await connection
      .promise()
      .query("SELECT * FROM user;");
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", results.length);
    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

app.get("/userBookings/:userId", async (req, res) => {
  const { userId } = req.params;
  console.log("üéØ userId ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤:", userId);

  try {
    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ time_zone ‡πÄ‡∏õ‡πá‡∏ô GMT+7 (Asia/Bangkok) ‡∏Å‡πà‡∏≠‡∏ô Query
    await connection.promise().query("SET time_zone = '+07:00'");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå"
    const [userResults] = await connection.promise().query(
      "SELECT role FROM user WHERE username = ?",
      [userId]
    );

    if (userResults.length === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    const userRole = userResults[0].role;
    console.log(`üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô: ${userRole}`);

    let query = "";
    let values = [];

    if (userRole === "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï") {
      // ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
      query = `
        SELECT 
          rlr.room_request_id, 
          rlr.room_id, 
          rli.room_name, 
          CONVERT_TZ(rlr.used_date, '+00:00', '+07:00') AS Used_date, 
          rlr.start_time, 
          rlr.end_time, 
          rlr.request_status, 
          rlr.request_type
        FROM room_request rlr
        JOIN room rli ON rlr.room_id = rli.room_id
        JOIN room_type rt ON rt.room_type_id = rli.room_type_id
        JOIN student s ON rlr.student_id = s.student_id
        WHERE s.student_id = ?`;
      values = [userId];
    } else if (userRole === "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå") {
      // ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
      query = `
        SELECT 
          rlr.room_request_id, 
          rlr.room_id, 
          rli.room_name, 
          CONVERT_TZ(rlr.used_date, '+00:00', '+07:00') AS Used_date, 
          rlr.start_time, 
          rlr.end_time, 
          rlr.request_status, 
          rlr.request_type
        FROM room_request rlr
        JOIN room rli ON rlr.room_id = rli.room_id
        JOIN room_type rt ON rt.room_type_id = rli.room_type_id
        JOIN teacher t ON rlr.teacher_id = t.teacher_id
        WHERE t.teacher_id = ?`;
      values = [userId];
    } else {
      return res.status(400).json({ error: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    const [results] = await connection.promise().query(query, values);
    console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á ${userId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, results);

    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});


// üìå Endpoint: /cancelBooking/:requestId
app.delete("/cancelBooking/:requestId", async (req, res) => {
  const { requestId } = req.params;
  console.log(`üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ID: ${requestId}`);

  try {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö requestId ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    if (!requestId) {
      console.log("‚ùå requestId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return res.status(400).json({ error: "requestId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö requestId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [checkResult] = await connection.promise().query(
      "SELECT * FROM room_request WHERE room_request_id = ?",
      [requestId]
    );
    console.log("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", checkResult);

    if (checkResult.length === 0) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ");
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï request_status ‡πÄ‡∏õ‡πá‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"
    const [updateResult] = await connection.promise().query(
      `UPDATE room_request
       SET request_status = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
       WHERE room_request_id = ?`,
      [requestId]
    );

    console.log("üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", updateResult);

    if (updateResult.affectedRows === 0) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ");
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }

    console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ID: ${requestId}`);
    res.json({ success: true, message: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });

  } catch (err) {
    console.error("‚ùå ERROR:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
  }
});



// Endpoint: /getEquipmentInformation
app.get("/getEquipmentInformation", async (req, res) => {
  try {
    const [results] = await connection
      .promise()
      .query("SELECT * FROM equipment");
    console.log(
      "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• equipment ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:",
      results.length
    );
    res.json(results);
  } catch (err) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

app.get("/getBrokenEquipments", async (req, res) => {
  if (!req.session.user || !req.session.user.data) {
    return res.status(401).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
  }

  const { role, data } = req.session.user;
  let userId = null;
  let query = "";
  let values = [];

  if (role === "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï") {
    userId = data.student_id;
    query = `
      SELECT 
        DATE_FORMAT(eb.Repair_date, '%Y-%m-%d %H:%i:%s') AS Repair_date, 
        ei.equipment_name, 
        eb.Damaged_details, 
        eb.room_id, 
        ai.full_name AS Admin_Name,
        eb.Repair_status
      FROM Equipments_list_brokened eb
      JOIN equipment ei ON eb.equipment_id = ei.equipment_id
      JOIN Admin_information ai ON eb.Admin_ID = ai.Admin_ID
      WHERE eb.student_id = ?  
      ORDER BY eb.Repair_date DESC;
    `;
    values = [userId];
  } else if (role === "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå") {
    userId = data.teacher_id;
    query = `
      SELECT 
        DATE_FORMAT(eb.Repair_date, '%Y-%m-%d %H:%i:%s') AS Repair_date, 
        ei.equipment_name, 
        eb.Damaged_details, 
        eb.room_id, 
        ai.full_name AS Admin_Name,
        eb.Repair_status
      FROM Equipments_list_brokened eb
      JOIN equipment ei ON eb.equipment_id = ei.equipment_id
      JOIN Admin_information ai ON eb.Admin_ID = ai.Admin_ID
      WHERE eb.teacher_id = ?  
      ORDER BY eb.Repair_date DESC;
    `;
    values = [userId];
  } else {
    return res.status(400).json({ error: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    const [results] = await connection.promise().query(query, values);
    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});


app.get("/getRoomInfo", async (req, res) => {
  const roomID = req.query.room;
  if (!roomID) {
    return res.status(400).json({ error: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ room ID" });
  }

  try {
    const [results] = await connection
      .promise()
      .query(
        "SELECT room_name, room_name FROM room WHERE room_id = ?",
        [roomID]
      );

    if (results.length === 0) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á" });
    }

    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

app.get("/getEquipmentsByIds", async (req, res) => {
  let ids = req.query.ids;

  if (!ids) {
    return res.status(400).json({ error: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ equipment_id" });
  }

  ids = ids.split(",").map((id) => id.trim()); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á

  console.log("üìå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend:", ids); // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤

  try {
    // ‚úÖ ‡πÉ‡∏ä‡πâ `IN (?)` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    const [results] = await connection
      .promise()
      .query(
        `SELECT equipment_id, equipment_name FROM equipment WHERE equipment_id IN (${ids
          .map(() => "?")
          .join(",")})`,
        ids
      );

    console.log("üìå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Database:", results); // ‚úÖ Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    if (results.length === 0) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå" });
    }

    res.json(results);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// üìå WebSocket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
io.on("connection", (socket) => {
  console.log("A user connected via WebSocket");
  socket.on("triggerBookingUpdate", () => {
    io.emit("booking_update", { message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" });
  });
  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

// üìå Endpoint: /bookRoom - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
app.post("/bookRoom", async (req, res) => {
  const {
    room_id,
    used_date,
    start_time,
    end_time,
    request_reason,
    request_type,
  } = req.body;

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
  if (!req.session.user || !req.session.user.data) {
    return res.status(401).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
  }

  const { role, data } = req.session.user;
  let userId = null;
  let identifyColumn = null;

  if (role === "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï") {
    userId = data.student_id;
    identifyColumn = "student_id"; // ‡πÉ‡∏ä‡πâ student_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
  } else if (role === "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå") {
    userId = data.teacher_id;
    identifyColumn = "teacher_id"; // ‡πÉ‡∏ä‡πâ teacher_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
  } else {
    return res.status(400).json({ error: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  if (!room_id || !used_date || !start_time || !end_time || !request_reason || !request_type) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  try {
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
    const query = `
          INSERT INTO room_request 
          (room_id, used_date, ${identifyColumn}, start_time, end_time, request_reason, request_status, request_type) 
          VALUES (?, ?, ?, ?, ?, ?, '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', ?);
      `;
    await connection
      .promise()
      .query(query, [
        room_id,
        used_date,
        userId,
        start_time,
        end_time,
        request_reason,
        request_type,
      ]);

    console.log(
      `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏´‡πâ‡∏≠‡∏á ${room_id} ‡πÇ‡∏î‡∏¢ ${role} ID ${userId}`
    );
    res.json({ success: true, message: "‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô WebSocket
    io.emit("booking_update", { message: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" });
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err);
    res.status(500).json({ error: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});


// üìå Endpoint: /bookRoomOut - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
app.post("/bookRoomOut", async (req, res) => {
  const {
    room_id,
    used_date,
    start_time,
    end_time,
    request_reason,
    request_type,
    members,
  } = req.body;

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
  if (!req.session.user || !req.session.user.data) {
    return res.status(401).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
  }

  const { role, data } = req.session.user;
  let userId = null;
  let identifyColumn = null;

  if (role === "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï") {
    userId = data.student_id;
    identifyColumn = "student_id"; // ‡πÉ‡∏ä‡πâ student_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
  } else if (role === "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå") {
    userId = data.teacher_id;
    identifyColumn = "teacher_id"; // ‡πÉ‡∏ä‡πâ teacher_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
  } else {
    return res.status(400).json({ error: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  if (!room_id || !used_date || !start_time || !end_time || !request_reason || !request_type) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  const connectionPromise = connection.promise();

  try {
    // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction
    await connectionPromise.beginTransaction();

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
    const insertBookingQuery = `
      INSERT INTO room_request 
      (room_id, used_date, ${identifyColumn}, start_time, end_time, request_reason, request_status, request_type) 
      VALUES (?, ?, ?, ?, ?, ?, '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', ?);
    `;
    const [result] = await connectionPromise.query(insertBookingQuery, [
      room_id,
      used_date,
      userId,
      start_time,
      end_time,
      request_reason,
      request_type,
    ]);

    const bookingId = result.insertId; // ‡πÑ‡∏î‡πâ `room_request_id` ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (members && members.length > 0) {
      const insertMembersQuery = `
        INSERT INTO Room_booking_members (room_request_id, ${identifyColumn}) 
        VALUES ?;
      `;

      const memberValues = members.map((member) => [bookingId, member]);

      await connectionPromise.query(insertMembersQuery, [memberValues]);
    }

    // ‚úÖ Commit Transaction
    await connectionPromise.commit();

    console.log(
      `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏´‡πâ‡∏≠‡∏á ${room_id} ‡πÇ‡∏î‡∏¢ ${role} ID ${userId}`
    );
    res.json({ success: true, message: "‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô WebSocket
    io.emit("booking_update", { message: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà" });
  } catch (err) {
    // ‚ùå Rollback Transaction ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    await connectionPromise.rollback();
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err);
    res.status(500).json({ error: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});


// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ Server running at http://localhost:${PORT}`);
});